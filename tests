
import numpy as np
from scipy.constants import mu_0, pi
import matplotlib.pyplot as plt
from scipy import ndimage
import warnings
warnings.filterwarnings('ignore', category=RuntimeWarning)


def solve_cartesian(electric_current):
    
    circuit_coords = np.array([(x, y) for x, row in enumerate(electric_current) for y, val in enumerate(row) if val.any()])
    print(circuit_coords, circuit_coords[:, 0], circuit_coords[:,1])
    champ_B = np.zeros_like(electric_current)
    for x in range(electric_current.shape[0]):
        for y in range(electric_current.shape[1]):
            r = np.stack((circuit_coords[:, 0] - x, circuit_coords[:, 1] - y, np.zeros(len(circuit_coords[:, 0]))), axis=-1)
            #print(r)
            module_r = np.sqrt((r ** 2).sum(axis=-1))
            #print(module_r)
            #print(electric_current[circuit_coords[:, 0], circuit_coords[:, 1]] )
            #print(np.cross(r, electric_current[circuit_coords[:, 0], circuit_coords[:, 1]])[:, 2])
            B = np.cross(r, electric_current[circuit_coords[:, 0], circuit_coords[:, 1]])[:, 2] / (module_r ** 3)
            champ_B[x, y][2] = np.sum(B, axis=0)
            #print(champ_B)
            
    return np.nan_to_num(mu_0 * champ_B / (4 * np.pi), nan=0)






vecto = np.array([[[1., 0., 0.], [1., 0., 0.], [1., 0., 0.], [0., 1., 0.]], [[0., 1., 0.], [0., 0., 0.], [0., 0., 0.], [0., 1., 0.]], [[0., 1., 0.], [0., 0., 0.], [0., 0., 0.], [0., 1., 0.]], [[0., 1., 0.], [0., 0., 0.], [0., 0., 0.], [0., 1., 0.]], [[0., 1., 0.], [1., 0., 0.], [1., 0., 0.], [1., 0., 0.]]])
#print(vecto)
#plt.imshow(vecto)
#plt.show()
print(solve_cartesian(vecto))
plt.imshow(solve_cartesian(vecto))
plt.show()


import env_examples  # Modifies path, DO NOT REMOVE

from sympy import Symbol, pi, sin, cos, sqrt

from src import Circuit, CoordinateSystem, VoltageSource, Wire, World


# if __name__ == "__main__":
#     WORLD_SHAPE = (101, 101)
#     BATTERY_VOLTAGE = 1.0
#     HIGH_WIRE_RESISTANCE = 1.0
#     LOW_WIRE_RESISTANCE = 0.01

#     cartesian_variables = Symbol("x"), Symbol("y")
#     x, y = cartesian_variables

#     x_expression_top = sqrt(1600 - (y-50)**2)
#     y_expression_right = sqrt(1600 - (x-50)**2)
    
#     q1_eqs = (x_expression_top, y_expression_right)
#     q2_eqs = (x_expression_top, -y_expression_right)
#     q3_eqs = (-x_expression_top, -y_expression_right)
#     q4_eqs = (-x_expression_top, y_expression_right)

#     wires = [
#         Wire((40*cos(275*pi/180) + 50, 40*sin(275*pi/180) + 50), (40*cos(0*pi/180) + 50, 40*sin(0*pi/180) + 50), q4_eqs, cartesian_variables, LOW_WIRE_RESISTANCE),
#         Wire((40*cos(0*pi/180) + 50, 40*sin(0*pi/180) + 50), (40*cos(85*pi/180) + 50, 40*sin(85*pi/180) + 50), q1_eqs, cartesian_variables, LOW_WIRE_RESISTANCE),
#         Wire((40*cos(85*pi/180) + 50, 40*sin(85*pi/180) + 50), (40*cos(90*pi/180) + 50, 40*sin(90*pi/180) + 50), q1_eqs, cartesian_variables, HIGH_WIRE_RESISTANCE),
#         Wire((40*cos(90*pi/180) + 50, 40*sin(90*pi/180) + 50), (40*cos(95*pi/180) + 50, 40*sin(95*pi/180) + 50), q2_eqs, cartesian_variables, HIGH_WIRE_RESISTANCE),
#         Wire((40*cos(95*pi/180) + 50, 40*sin(95*pi/180) + 50), (40*cos(180*pi/180) + 50, 40*sin(180*pi/180) + 50), q2_eqs, cartesian_variables, LOW_WIRE_RESISTANCE),
#         Wire((40*cos(180*pi/180) + 50, 40*sin(180*pi/180) + 50), (40*cos(265*pi/180) + 50, 40*sin(265*pi/180) + 50), q3_eqs, cartesian_variables, LOW_WIRE_RESISTANCE),
#         VoltageSource((40*cos(265*pi/180) + 50, 40*sin(265*pi/180) + 50), (40*cos(270*pi/180) + 50, 40*sin(270*pi/180) + 50), q3_eqs, cartesian_variables, BATTERY_VOLTAGE),
#         VoltageSource((40*cos(270*pi/180) + 50, 40*sin(270*pi/180) + 50), (40*cos(275*pi/180) + 50, 40*sin(275*pi/180) + 50), q4_eqs, cartesian_variables, BATTERY_VOLTAGE),
#     ]
    

if __name__ == "__main__":
    WORLD_SHAPE = (101, 101)
    BATTERY_VOLTAGE = 1.0
    WIRE_RESISTANCE = 0.01

    # Define the parametric equations for a circle with radius 40 and center (50,50)
    t = Symbol("t")
    x = 40*cos(t) + 50
    y = 40*sin(t) + 50
    
    # Define the equation for the wires
    wire_eqs = (x, y)

    # Define the wires and voltage sources
    wires = [
        Wire((40*cos(275*pi/180) + 50, 40*sin(275*pi/180) + 50), (40*cos(0*pi/180) + 50, 40*sin(0*pi/180) + 50), wire_eqs, (t,), WIRE_RESISTANCE),
        Wire((40*cos(0*pi/180) + 50, 40*sin(0*pi/180) + 50), (40*cos(85*pi/180) + 50, 40*sin(85*pi/180) + 50), wire_eqs, (t,), WIRE_RESISTANCE),
        Wire((40*cos(85*pi/180) + 50, 40*sin(85*pi/180) + 50), (40*cos(90*pi/180) + 50, 40*sin(90*pi/180) + 50), wire_eqs, (t,), WIRE_RESISTANCE),
        Wire((40*cos(90*pi/180) + 50, 40*sin(90*pi/180) + 50), (40*cos(95*pi/180) + 50, 40*sin(95*pi/180) + 50), wire_eqs, (t,), WIRE_RESISTANCE),
        Wire((40*cos(95*pi/180) + 50, 40*sin(95*pi/180) + 50), (40*cos(180*pi/180) + 50, 40*sin(180*pi/180) + 50), wire_eqs, (t,), WIRE_RESISTANCE),
        Wire((40*cos(180*pi/180) + 50, 40*sin(180*pi/180) + 50), (40*cos(265*pi/180) + 50, 40*sin(265*pi/180) + 50), wire_eqs, (t,), WIRE_RESISTANCE),
        VoltageSource((40*cos(265*pi/180) + 50, 40*sin(265*pi/180) + 50), (40*cos(270*pi/180) + 50, 40*sin(270*pi/180) + 50), wire_eqs, (t,), BATTERY_VOLTAGE),
        VoltageSource((40*cos(270*pi/180) + 50, 40*sin(270*pi/180) + 50), (40*cos(275*pi/180) + 50, 40*sin(275*pi/180) + 50), wire_eqs, (t,), BATTERY_VOLTAGE),
    ]
    ground_position = (40*cos(265*pi/180) + 50, 40*sin(265*pi/180) + 50)

    circuit = Circuit(wires, ground_position)
    world = World(circuit=circuit, coordinate_system=CoordinateSystem.CARTESIAN, shape=WORLD_SHAPE)
    world.show_circuit(
        {0: (40, 0), 1: (40, 100), 2: (40, 120), 3: (40, 180)}
    )
    world.compute()
    world.show_all()
